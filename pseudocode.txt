---LINUX SHELL PSEUDOCODE---

********GLOBAL VARIABLES********
//Stores the current path
std::vector PATH;

//Stores known built-in commands
std::vector built_ins = {cd, clr, dir, environ, echo, help, pause, quit}

//Stores Environment variables
std::vector environment_variables
    To initialize:
    -PWD==getenv("PWD");
    -HOME=getenv("HOME");
    -LANG==getenv("HOME");
    -LOGNAME=getenv("LOGNAME");
    -_system_name=getenv("_system_name");

//Manual String
std::string manual = "Will insert manual text here";

********COMMAND CLASS********
//After user input is parsed it will be placed into this class

class Command{
    public:
        std::string commandName;
        std::vector argList;
        bool redirection;
        std::string redirection_file_name;
        bool isBackground
}

********MAIN LOOP********
//Main logic that repeats until user enters quit
myshell(){
    while(user not type exit){
        print prompt myshell>
        std::vector<Command>  = parse_input();

        Check if there are multiple commands
            if not:
        if(command is a known built in command){
            execute command given in input
        }else{
            try to execute the system command
            fork() to make a new process
            parent process:
                if not background:
                   wait() for child process to finish to send error
                else if background:
                    std::cout << "pid " << pid << "started\n";
            child process:
                if background:
                execvp() to attempt to run command or send error
                checkChildFinished();  //Will notify user when child finishes

        }

        If multiple commands:
            Run the above but with all commands in the background


        wait for command(s) to finish
    }
}

//Returns a vector with a list of at least one command
std::vector<Command> parse_input(){
    //Keeps track if there are multiple commands
    int current_command_index = 0;
    Command newCommand;

    //Vector of commands in the case that there is more than one command
    std::vector<Command> commands
    commands.push_back(newCommand);

    //Get user input into a string
    std::string user_input;
    std::getline(cin, user_input);

    //Split user input into tokens
    std::vector tokens = split(user_input);

    //Set first command into tokens
    newCommand.command = tokens[0]

    for(i=1 to tokens.length){
        if(not redirection or &){
            add to command arguments
        }else if( & ){
            create a new command and add to commands vector
            increase the current_command_index
        }else if(redirection){
            Add to currentCommand.redirection;
        }



    }


}

//Splits a string into tokens and returns them as a vector
std::vector<std::string> split(std::string s)
{
   std::vector<std::string> tkns;
   std::string tkn;
   std::istringstream tokenStream(s);
   while (std::getline(tokenStream, tkn))
   {
      tkns.push_back(tkn);
   }
   return tkns;
}

********TOOL FOR PARALLEL COMMANDS********

//Checks if a particular child process is finished
void checkChildFinished()
{
  int status;
  pid_t pid = waitpid(-1, &status, WNOHANG);
  if (pid < 0 && errno != ECHILD)
    std::cerr << "Failure of waitpid" << "\n";
  else if (pid > 0)
    std::cout << "Process " << pid << " finished with status " << status << "\n";
}

********BUILT IN COMMANDS********
    //Quits the myshell program
    quit(){
        call exit system call with 0 as a parameter
    }

    //Changes the directory based on user input
    cd(directory to change to provided by user){
        if(0 or >1 arguments){
            ERROR
        }else{
            chdir(directory to change to provided by user)
            if(chdir fails){
                ERROR
            }else{
                char temp_path [ PATH_MAX ];
                if (getcwd(temp, PATH_MAX) != 0){
                     PWD << std::string ( temp ) << "\n";
                 }
            }

        }
    }

    //Sets the user path
    path(std::vector path_elements){
        //clear the current path
        PATH.clear()

        //Add new paths to PATH
        for(path in path_elements){
            PATH.push_back(path);
        }
    }

    //Clears the terminal screen
    clr(){
        printf("\033[H\033[2J");
    }

    //Lists all files in the current directory or directory given
    dir(){
        use getcwd();
        then use readdir() and go through each file one by one
        to list them off;
    }


    //List the environment variables
    environ(){
        iterate through environment_vars vector
        print each variable and its value
    }

    //Prints user input to the terminal
    echo(user_input){
        std::cout << user_input << "\n";
    }


    //Display user manual using the more filter
    help(){
        std::cout << manual //declared above
    }

    //Pause operation of the shell until 'Enter' is pressed
    pause(){
        std::string user_input = std::cin.get();
        while(user_input != "\n"){
            user_input = std::cin.get();
        }

    }
********BATCH MODE FILE READING********
void commands_from_file(std::string filename){
    std::string line;
    std::ifstream f (filename);
    if (f.is_open()){
        while ( getline (f,line) ){
            std::vector<Command>  = parse_input();

            if built in and single command:
                execute the command
            else if not built in and single command:
                try to execute the system command
                fork() to make a new process
                child process:
                   execvp() to attempt to run command or send error
                parent process:
                   wait() for child process to finish to send error
            else if multiple commands:
                Run the above but with all commands in the background

        }

    }
 }


********REDIRECTION TOOLS********
    //used to redirect output to a file
    void print_to_file(std::string output, std::string file_name){
        std::ofstream f (file_name);
        if(f.is_open()){
            f << output;
        }
        f.close();
    }



********ERROR FUNCTION********
    print_error(){
        char error_message[30] = "An error has occurred\n";
        write(STDERR_FILENO, error_message, strlen(error_message));
    }

